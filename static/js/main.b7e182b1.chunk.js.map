{"version":3,"sources":["view/login/login.tsx","utils/ajax.ts","view/login/register.tsx","view/login/fastlogin.tsx","view/guide/index.tsx","view/index.tsx","App.tsx","serviceWorker.ts","store/reducer/login/login.ts","store/reducer/index.ts","store/index.ts","index.tsx"],"names":["props","history","goToLogin","url","push","style","height","position","className","size","placeholder","prefix","UserOutlined","Password","iconRender","visible","EyeTwoTone","EyeInvisibleOutlined","onClick","console","log","Axios","defaults","baseURL","headers","post","interceptors","request","use","config","message","loading","content","key","duration","err","error","Promise","reject","response","destroy","username","password","usercode","getValue","data","code","persist","target","value","useState","countBefore","countSet","count","useRef","getCodeFlag","setGetCodeFlag","onChange","color","timer","setInterval","current","clearInterval","axios","then","res","success","warning","useEffect","Swiper","loop","pagination","el","dynamicBullets","width","path","exact","render","to","component","Login","Register","Fastlogin","Guide","App","Layout","Boolean","window","location","hostname","match","defaultState","auother","reducer","combineReducers","login","state","actions","type","store","createStore","applyMiddleware","Thunk","document","documentElement","fontSize","clientWidth","ReactDOM","getElementById","subscribe","navigator","serviceWorker","ready","registration","unregister","catch"],"mappings":"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","file":"static/js/main.b7e182b1.chunk.js","sourcesContent":["import React from 'react'\r\nimport { Input,Button } from 'antd';\r\nimport { UserOutlined,EyeInvisibleOutlined, EyeTwoTone } from '@ant-design/icons';\r\nimport \"./login.scss\"\r\n\r\nexport default (props:{history:{}})=>{\r\n    const history = props.history;\r\n    const goToLogin = (url:string)=>{\r\n        (history as {push:(str:string,opt?:{})=>void}).push(url)\r\n    }\r\n    return(\r\n        <div style={{height:'100vh',position:'relative'}}>\r\n            <div className=\"username\">\r\n                <div>\r\n                    账号: \r\n                </div>\r\n                <div>\r\n                    <Input size=\"large\" placeholder=\"large size\" prefix={<UserOutlined />} />\r\n                </div>\r\n            </div>\r\n            <div className=\"password\">\r\n                <div>\r\n                    密码: \r\n                </div>\r\n                <div>\r\n                    <Input.Password\r\n                        size=\"large\" \r\n                        placeholder=\"input password\"\r\n                        iconRender={visible => (visible ? <EyeTwoTone /> : <EyeInvisibleOutlined />)}\r\n                    />\r\n                </div>\r\n            </div>\r\n            <Button className=\"button_login\" onClick={()=>{ console.log('我登录啦') }}>开启梦幻之旅</Button>\r\n            <div className=\"go_page go_left\" onClick={()=>{goToLogin('/fastlogin')}}>快速登录 {\">\"}</div>\r\n            <div className=\"go_page go_right\" onClick={()=>{goToLogin('/register')}}>注册账号 {\">\"}</div>\r\n        </div>\r\n    )\r\n}","import Axios from 'axios';\r\nimport {message} from 'antd'\r\n\r\n\r\n\t\r\nAxios.defaults.baseURL = 'http://3e2t688318.wicp.vip:80'; //请求头 内网穿透花生壳\r\nAxios.defaults.headers.post['Content-Type'] = 'application/json;charset=UTF-8';//配置请求头\r\n\r\nconst key = 'axiosLoadingStr'\r\n\r\n//设置请求拦截器\r\nAxios.interceptors.request.use((config)=>{\r\n    message.loading({content:'请求中',key,duration:0})\r\n    return config\r\n},(err)=>{\r\n    message.error('未知错误');\r\n    return Promise.reject(err);\r\n})\r\n\r\n\r\n  //设置响应拦截器\r\n  Axios.interceptors.response.use(function (response) {\r\n    message.destroy()\r\n    return response;\r\n  }, function (error) {\r\n    message.destroy()\r\n    message.error('未知错误');\r\n    return Promise.reject(error);\r\n  })\r\n\r\n  export default Axios; //导出axios","import React,{useRef,useState} from 'react'\r\nimport { Input,Button, message } from 'antd';\r\nimport { UserOutlined,EyeInvisibleOutlined, EyeTwoTone } from '@ant-design/icons';\r\nimport \"./login.scss\"\r\nimport {IinputeValue} from './../../common/interface'\r\nimport axios from './../../utils/ajax'\r\n\r\n\r\nexport default (props:{history:{}})=>{\r\n\r\n    //得到用户输入的数据\r\n    let username = \"\"; //用户名\r\n    let password = \"\"; //密码\r\n    let usercode = \"\"; //code\r\n    const getValue = (data:IinputeValue,code:number)=>{\r\n        data.persist()\r\n        switch(code){\r\n            case 0:\r\n                username = data.target.value;\r\n            return;\r\n            case 1:\r\n                password = data.target.value;\r\n            return;\r\n            case 2:\r\n                usercode = data.target.value;\r\n                console.log(usercode)\r\n            return;\r\n            default:\r\n                return \"\"\r\n        }\r\n    }\r\n    \r\n    //用户点击注册\r\n    const registerFn = ()=>{\r\n        console.log(username)\r\n        console.log(password)\r\n        console.log(usercode)\r\n        if(username===''||password===''){\r\n            message.warning('用户名或密码为空');\r\n            return;\r\n        }\r\n        axios.post('/lr/register',{username,password}).then(res=>{\r\n            if(res.data.code === '000000'){\r\n                message.success('注册成功');\r\n            }else if(res.data.code === '000001'){\r\n                message.warning('该用户名已注册');\r\n            }\r\n        })\r\n    }\r\n\r\n\r\n    //用户点击获取验证码\r\n    const [countBefore,countSet] = useState(60) \r\n    const count = useRef(60); //时间限制60s 用户点击一次获取验证码后需60s后才能再次点击\r\n    let [getCodeFlag,setGetCodeFlag] = useState(true); //注册按钮是否可以点击(标量 - true可点击 false不可点击)\r\n    //用户点击获取验证码\r\n    const getCode = ()=>{\r\n        let timer:any; //定时器\r\n        console.log('我是魔鬼伟')\r\n        console.log(getCodeFlag)\r\n        if(!getCodeFlag){\r\n            return;\r\n        }\r\n        setGetCodeFlag(false); //设置注册按钮为不可点击\r\n        timer=setInterval(()=>{\r\n            if(count.current<1){\r\n                clearInterval(timer);\r\n                setGetCodeFlag(true); //重置按钮为可点击\r\n                count.current=60\r\n                countSet(60)\r\n                timer=null;\r\n                return;\r\n            }; //当时间为0s的时候可以继续点击,此时需要清除定时器\r\n            count.current--;\r\n            countSet(count.current)\r\n        },100)\r\n        \r\n    }\r\n\r\n\r\n\r\n    const history = props.history;\r\n    const goToLogin = (url:string)=>{\r\n        (history as {push:(str:string,opt?:{})=>void}).push(url)\r\n    }\r\n    return(\r\n        <div style={{height:'100vh',position:'relative'}}>\r\n            <div className=\"username\">\r\n                <div>\r\n                    账号: \r\n                </div>\r\n                <div>\r\n                    <Input size=\"large\" placeholder=\"large size\" prefix={<UserOutlined />} onChange={(data)=>{getValue(data,0)}}/>\r\n                </div>\r\n            </div>\r\n            <div className=\"password\">\r\n                <div>\r\n                    密码: \r\n                </div>\r\n                <div>\r\n                    <Input.Password\r\n                        size=\"large\" \r\n                        placeholder=\"input password\"\r\n                        iconRender={visible => (visible ? <EyeTwoTone /> : <EyeInvisibleOutlined />)}\r\n                        onChange={(data)=>{getValue(data,1)}}\r\n                    />\r\n                </div>\r\n            </div>\r\n            \r\n            <div className=\"code_register\">\r\n                <div>\r\n                    验证码: \r\n                </div>\r\n                <div>\r\n                    <Input size=\"large\"  onChange={(data)=>{getValue(data,2)}}></Input>\r\n                </div>\r\n                <div>\r\n                    <Button className=\"get_code_button\" style={{color:countBefore===60?'':'#ccc'}} onClick={getCode}>{countBefore===60?'获取验证码':countBefore+'s后可点击'}</Button>\r\n                </div>\r\n            </div> \r\n            <Button className=\"button_login\" onClick={registerFn}>立即注册</Button>\r\n            \r\n            <div className=\"go_page go_left\" onClick={()=>{goToLogin('/fastlogin')}}>快速登录 {\">\"}</div>\r\n            <div className=\"go_page go_right\" onClick={()=>{goToLogin('/login')}}>密码登录 {\">\"}</div>\r\n        </div>\r\n    )\r\n}","import React from 'react'\r\nconsole.log(100)\r\nexport default ()=>{\r\n    return(\r\n        <div>\r\n            我是快速登录页\r\n        </div>\r\n    )\r\n}","//引导页\r\nimport React,{useEffect} from 'react';\r\nimport Swiper from \"swiper\";\r\nimport './index.scss'\r\nimport { Button } from 'antd';\r\n\r\nexport default (props: {history:{}})=>{\r\n    const history = props.history;\r\n    const goToLogin = ()=>{\r\n        (history as {push:(str:string,opt?:{})=>void}).push('/login')\r\n    }\r\n\r\n    useEffect(()=>{\r\n        new Swiper('.swiper-container',{\r\n            loop:false,\r\n            pagination: {//小圆点分页\r\n                el: '.swiper-pagination',\r\n                dynamicBullets: true,\r\n            },\r\n        })\r\n    },[]); //只会在加载后执行一次swiper\r\n\r\n    return(\r\n        <div style={{width:'100%',height:'100vh'}}>\r\n            <div className='swiper-container' style={{width:'100%',height:'100vh'}}>\r\n                <div className=\"swiper-wrapper\">\r\n                    <div className=\"swiper-slide\">\r\n                        <div className=\"guide_one\">\r\n                            <div>您好!</div>\r\n                            <div>欢迎来到这个梦幻世界</div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"swiper-slide\">\r\n                        <div className=\"guide_one\">\r\n                            <div>自然</div>\r\n                            <div>清新脱俗 尽显自然之美</div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"swiper-slide\">\r\n                        <div className=\"guide_one\">\r\n                            <div>梦幻</div>\r\n                            <div>一面科技 一面梦幻</div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"swiper-slide\">\r\n                        <div className=\"guide_one\">\r\n                            <div>入梦</div>\r\n                            <div>一沙一世界 一叶一菩提</div>\r\n                        </div>\r\n                        <Button className=\"button_login\" onClick={()=>{goToLogin()}}>开启梦幻之旅</Button>\r\n                    </div>\r\n                </div>\r\n                <div className=\"swiper-pagination\"></div>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React from 'react'\r\nimport {Switch,Route,Redirect} from 'react-router-dom';\r\nimport Login from './login/login'; //登录页\r\nimport Register from './login/register'; //注册页页\r\nimport Fastlogin from './login/fastlogin'; //快速登录页\r\n\r\nimport Guide from \"./guide\";    //引导页\r\n\r\n\r\n\r\nexport default ()=>{\r\n    return (\r\n        <div>\r\n            <Switch>\r\n                <Route path=\"/\" exact render={()=><Redirect to=\"/guide\" /> } />\r\n                <Route path=\"/login\" component={Login} />\r\n                <Route path=\"/register\" component={Register} />\r\n                <Route path=\"/fastlogin\" component={Fastlogin} />\r\n                <Route path=\"/guide\" component={Guide} />\r\n            </Switch>\r\n        </div>\r\n    )\r\n}","import React from 'react';\nimport {Route,HashRouter as Router} from 'react-router-dom';\nimport Layout from './view/index'\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router>\n        <Route component={Layout}></Route>\n      </Router>\n    </div> \n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","let defaultState = {\r\n    auother:'lixiaobai'\r\n}\r\n\r\nexport default (state=defaultState,actions:{type:string,[propName:string]:unknown})=>{\r\n    switch(actions.type){\r\n        default:\r\n            return state;\r\n    }\r\n}","import {combineReducers} from 'redux';\r\nimport login from './login/login'\r\n\r\nconst reducer = combineReducers({\r\n    login\r\n})\r\n\r\nexport default reducer","import {createStore,applyMiddleware} from 'redux';\r\nimport Promise from 'redux-promise'; //actions中允许使用异步\r\nimport Thunk from 'redux-thunk';//actions中允许使用异步\r\nimport reducer from './reducer' //reducer\r\n\r\nconst store = createStore(reducer,applyMiddleware(Thunk,Promise)); //创建store\r\n\r\nexport default store; \r\n\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'antd/dist/antd.css'\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport store from './store'\nimport 'swiper/css/swiper.min.css';\n\n\n\ndocument.documentElement.style.fontSize = document.documentElement.clientWidth/7.5+'px'; //网易适配\n\nconst render = ()=>{\n  ReactDOM.render(\n      <App />,\n    document.getElementById('root')\n  );\n}\nrender();\n\nstore.subscribe(render); //将store挂载至整个程序\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}